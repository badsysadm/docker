#!/bin/bash

register_node() {
  args="--batch --no-sync"

  WALLARM_API_USE_SSL="${WALLARM_API_USE_SSL:-true}"
  WALLARM_API_CA_VERIFY="${WALLARM_API_CA_VERIFY:-true}"

  if [ -n "${DEPLOY_FORCE}" ]; then
    args="$args --force"
  fi

  if [ -n "$WALLARM_API_HOST" ]; then
    args="$args -H $WALLARM_API_HOST"
  fi

  if [ -n "$WALLARM_API_PORT" ]; then
    args="$args -P $WALLARM_API_PORT"
  fi

  if [ x"$WALLARM_API_USE_SSL" = x"false" ] \
     || [ x"$WALLARM_API_USE_SSL" = x"False" ] \
     || [ x"$WALLARM_API_USE_SSL" = x"no" ]
  then
    args="$args --no-ssl"
  fi

  if [ x"$WALLARM_API_CA_VERIFY" = x"false" ] \
     || [ x"$WALLARM_API_CA_VERIFY" = x"False" ] \
     || [ x"$WALLARM_API_CA_VERIFY" = x"no" ]
  then
    args="$args --no-verify"
  fi

  if [ x"$POSTANALYTIC_ONLY" = x"true" ] \
    || [ x"$POSTANALYTIC_ONLY" = x"True" ] \
    || [ x"$POSTANALYTIC_ONLY" = x"yes" ]
  then
    args="$args --postanalytic-only"
  fi

  if [ -n "$POSTANALYTIC_ADDRESS" ]; then
    args="$args --filtering-only"
  fi

  if [ -e /etc/wallarm/node.yaml ] \
     && [ -s /etc/wallarm/node.yaml ]
  then
    echo "Node registartion skipped - node.yaml already exists"
  elif [ -n "$NODE_UUID" ] \
    && [ -n "$NODE_SECRET" ] \
    && [ -n "$WALLARM_API_TOKEN" ]
  then
    /usr/share/wallarm-common/register-node \
      $args \
        --uuid "$NODE_UUID"
  else
    /usr/share/wallarm-common/register-node \
      $args
  fi
}

sync_node() {
  cmd="/usr/share/wallarm-common/syncnode -l STDOUT"

  for i in $(seq 1 3); do
    if $cmd; then
      break
    elif [ -f /etc/wallarm/proton.db ] && [ -f /etc/wallarm/custom_ruleset ]; then
      break
    else
      echo "Wait before next syncnode attempt..."
      sleep 5
    fi
  done
}

craft_wallarm_status_snippet() {
  {
    printf "\tlocation /wallarm-status {\n"
    for cidr in $(echo "$WALLARM_STATUS_ALLOW" | sed "s/,/ /g"); do
      printf "\t\tallow %s;\n" "$cidr"
    done
    printf "\t\tdeny all;\n"
    printf "\t\twallarm_status on;\n"
    printf "\t\twallarm_mode off;\n"
    printf "\t}\n\n"
  } >/tmp/wallarm-status.conf
}

insert_wallarm_status_snippet() {
  line_for_insert=$(grep -n "location / {" /etc/nginx/sites-enabled/default | cut -f 1 -d:)
  line_for_insert=$((line_for_insert - 1))
  sed -i "${line_for_insert}r /tmp/wallarm-status.conf" /etc/nginx/sites-enabled/default
}

configure_services() {
  if [ x"$POSTANALYTIC_ONLY" = x"true" ] \
    || [ x"$POSTANALYTIC_ONLY" = x"True" ] \
    || [ x"$POSTANALYTIC_ONLY" = x"yes" ]
  then
    rm /etc/cron.d/wallarm-node-nginx
    rm /etc/collectd/wallarm-collectd.conf.d/nginx-wallarm.conf
    mv /etc/supervisor/supervisord.post-analytics.conf.example /etc/supervisor/supervisord.conf
    sed  -e 's/# post-analytic://' -i /etc/cron.d/wallarm-node-tarantool
  fi

  if [ -n "$POSTANALYTIC_ADDRESS" ]; then
    rm /etc/cron.d/wallarm-node-tarantool
    rm /etc/collectd/wallarm-collectd.conf.d/wallarm-tarantool.conf
    mv /etc/supervisor/supervisord.filtering.conf.example /etc/supervisor/supervisord.conf
  fi
}

if [ "${1}" = "--source-only" ]
then
  return
fi

if [ x"$WALLARM_FALLBACK" = x"false" ]
then
  set -e
fi

if [ "x${SLAB_ALLOC_ARENA}" = 'x' ]; then
  if [ -n "$TARANTOOL_MEMORY_GB" ]; then
    SLAB_ALLOC_ARENA=$TARANTOOL_MEMORY_GB
    export SLAB_ALLOC_ARENA
  fi
fi

if [ -n "$POSTANALYTIC_ADDRESS" ] && [ -n "$POSTANALYTIC_ONLY" ]; then
  echo "ERROR: noooo you can't just set postanalytic and filtering type at the same time..."

  exit 1
fi

if [ -z "$WALLARM_API_TOKEN" ]; then
  if [ ! -f "/etc/wallarm/private.key" ]; then
    echo "ERROR: no WALLARM_API_TOKEN and no private key in /etc/wallarm/private.key" >&2
    exit 1
  fi
fi


register_node
sync_node
